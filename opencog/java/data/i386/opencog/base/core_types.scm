
; DO NOT EDIT THIS FILE! This file was automatically
; generated from atom definitions in
; /home/cogroid/wrk/d-atomspace/i386/d-atomspace/opencog/atoms/atom_types/atom_types.script
; by the macro OPENCOG_SCM_ATOMTYPES
;
; This file contains basic scheme wrappers for atom creation.
;
(define-public NotypeType (cog-type->int 'Notype))
(define-public (Notype . x)
	(apply cog-new-link (cons NotypeType x)))
(define-public (Notype . x)
	(apply cog-new-link (cons NotypeType x)))
(define-public ValueType (cog-type->int 'Value))
(define-public (Value . x)
	(apply cog-new-value (cons ValueType x)))
(define-public VoidValueType (cog-type->int 'VoidValue))
(define-public (VoidValue . x)
	(apply cog-new-value (cons VoidValueType x)))
(define-public FloatValueType (cog-type->int 'FloatValue))
(define-public (FloatValue . x)
	(apply cog-new-value (cons FloatValueType x)))
(define-public StringValueType (cog-type->int 'StringValue))
(define-public (StringValue . x)
	(apply cog-new-value (cons StringValueType x)))
(define-public LinkValueType (cog-type->int 'LinkValue))
(define-public (LinkValue . x)
	(apply cog-new-value (cons LinkValueType x)))
(define-public ValuationType (cog-type->int 'Valuation))
(define-public StreamValueType (cog-type->int 'StreamValue))
(define-public (StreamValue . x)
	(apply cog-new-value (cons StreamValueType x)))
(define-public RandomStreamType (cog-type->int 'RandomStream))
(define-public (RandomStream . x)
	(apply cog-new-value (cons RandomStreamType x)))
(define-public FormulaStreamType (cog-type->int 'FormulaStream))
(define-public (FormulaStream . x)
	(apply cog-new-value (cons FormulaStreamType x)))
(define-public LinkStreamValueType (cog-type->int 'LinkStreamValue))
(define-public (LinkStreamValue . x)
	(apply cog-new-value (cons LinkStreamValueType x)))
(define-public QueueValueType (cog-type->int 'QueueValue))
(define-public (QueueValue . x)
	(apply cog-new-value (cons QueueValueType x)))
(define-public TruthValueType (cog-type->int 'TruthValue))
(define-public (TruthValue . x)
	(apply cog-new-value (cons TruthValueType x)))
(define-public SimpleTruthValueType (cog-type->int 'SimpleTruthValue))
(define-public (SimpleTruthValue . x)
	(apply cog-new-value (cons SimpleTruthValueType x)))
(define-public CountTruthValueType (cog-type->int 'CountTruthValue))
(define-public (CountTruthValue . x)
	(apply cog-new-value (cons CountTruthValueType x)))
(define-public IndefiniteTruthValueType (cog-type->int 'IndefiniteTruthValue))
(define-public (IndefiniteTruthValue . x)
	(apply cog-new-value (cons IndefiniteTruthValueType x)))
(define-public FuzzyTruthValueType (cog-type->int 'FuzzyTruthValue))
(define-public (FuzzyTruthValue . x)
	(apply cog-new-value (cons FuzzyTruthValueType x)))
(define-public ProbabilisticTruthValueType (cog-type->int 'ProbabilisticTruthValue))
(define-public (ProbabilisticTruthValue . x)
	(apply cog-new-value (cons ProbabilisticTruthValueType x)))
(define-public EvidenceCountTruthValueType (cog-type->int 'EvidenceCountTruthValue))
(define-public (EvidenceCountTruthValue . x)
	(apply cog-new-value (cons EvidenceCountTruthValueType x)))
(define-public FormulaTruthValueType (cog-type->int 'FormulaTruthValue))
(define-public (FormulaTruthValue . x)
	(apply cog-new-value (cons FormulaTruthValueType x)))
(define-public AtomType (cog-type->int 'Atom))
(define-public (Atom . x)
	(apply cog-new-link (cons AtomType x)))
(define-public (Atom . x)
	(apply cog-new-link (cons AtomType x)))
(define-public FrameType (cog-type->int 'Frame))
(define-public (Frame . x)
	(apply cog-new-link (cons FrameType x)))
(define-public (Frame . x)
	(apply cog-new-link (cons FrameType x)))
(define-public AtomSpaceType (cog-type->int 'AtomSpace))
(define-public AtomSpace cog-new-atomspace)
(define-public NodeType (cog-type->int 'Node))
(define-public (Node . x)
	(apply cog-new-node (cons NodeType x)))
(define-public LinkType (cog-type->int 'Link))
(define-public (Link . x)
	(apply cog-new-link (cons LinkType x)))
(define-public ConceptNodeType (cog-type->int 'ConceptNode))
(define-public (ConceptNode . x)
	(apply cog-new-node (cons ConceptNodeType x)))
(define-public (Concept . x)
	(apply cog-new-node (cons ConceptNodeType x)))
(define-public NumberNodeType (cog-type->int 'NumberNode))
(define-public (NumberNode . x)
	(apply cog-new-node (cons NumberNodeType x)))
(define-public (Number . x)
	(apply cog-new-node (cons NumberNodeType x)))
(define-public OrderedLinkType (cog-type->int 'OrderedLink))
(define-public (OrderedLink . x)
	(apply cog-new-link (cons OrderedLinkType x)))
(define-public (Ordered . x)
	(apply cog-new-link (cons OrderedLinkType x)))
(define-public UnorderedLinkType (cog-type->int 'UnorderedLink))
(define-public (UnorderedLink . x)
	(apply cog-new-link (cons UnorderedLinkType x)))
(define-public (Unordered . x)
	(apply cog-new-link (cons UnorderedLinkType x)))
(define-public PredicateNodeType (cog-type->int 'PredicateNode))
(define-public (PredicateNode . x)
	(apply cog-new-node (cons PredicateNodeType x)))
(define-public (Predicate . x)
	(apply cog-new-node (cons PredicateNodeType x)))
(define-public EvaluatableLinkType (cog-type->int 'EvaluatableLink))
(define-public (EvaluatableLink . x)
	(apply cog-new-link (cons EvaluatableLinkType x)))
(define-public (Evaluatable . x)
	(apply cog-new-link (cons EvaluatableLinkType x)))
(define-public CrispOutputLinkType (cog-type->int 'CrispOutputLink))
(define-public (CrispOutputLink . x)
	(apply cog-new-link (cons CrispOutputLinkType x)))
(define-public (CrispOutput . x)
	(apply cog-new-link (cons CrispOutputLinkType x)))
(define-public NumericOutputLinkType (cog-type->int 'NumericOutputLink))
(define-public (NumericOutputLink . x)
	(apply cog-new-link (cons NumericOutputLinkType x)))
(define-public (NumericOutput . x)
	(apply cog-new-link (cons NumericOutputLinkType x)))
(define-public BooleanLinkType (cog-type->int 'BooleanLink))
(define-public (BooleanLink . x)
	(apply cog-new-link (cons BooleanLinkType x)))
(define-public (Boolean . x)
	(apply cog-new-link (cons BooleanLinkType x)))
(define-public NumericInputLinkType (cog-type->int 'NumericInputLink))
(define-public (NumericInputLink . x)
	(apply cog-new-link (cons NumericInputLinkType x)))
(define-public (NumericInput . x)
	(apply cog-new-link (cons NumericInputLinkType x)))
(define-public TypeInputLinkType (cog-type->int 'TypeInputLink))
(define-public (TypeInputLink . x)
	(apply cog-new-link (cons TypeInputLinkType x)))
(define-public (TypeInput . x)
	(apply cog-new-link (cons TypeInputLinkType x)))
(define-public TypeOutputLinkType (cog-type->int 'TypeOutputLink))
(define-public (TypeOutputLink . x)
	(apply cog-new-link (cons TypeOutputLinkType x)))
(define-public (TypeOutput . x)
	(apply cog-new-link (cons TypeOutputLinkType x)))
(define-public AlphaConvertibleLinkType (cog-type->int 'AlphaConvertibleLink))
(define-public (AlphaConvertibleLink . x)
	(apply cog-new-link (cons AlphaConvertibleLinkType x)))
(define-public (AlphaConvertible . x)
	(apply cog-new-link (cons AlphaConvertibleLinkType x)))
(define-public CollectionLinkType (cog-type->int 'CollectionLink))
(define-public (CollectionLink . x)
	(apply cog-new-link (cons CollectionLinkType x)))
(define-public (Collection . x)
	(apply cog-new-link (cons CollectionLinkType x)))
(define-public ListLinkType (cog-type->int 'ListLink))
(define-public (ListLink . x)
	(apply cog-new-link (cons ListLinkType x)))
(define-public (List . x)
	(apply cog-new-link (cons ListLinkType x)))
(define-public SetLinkType (cog-type->int 'SetLink))
(define-public (SetLink . x)
	(apply cog-new-link (cons SetLinkType x)))
(define-public (Set . x)
	(apply cog-new-link (cons SetLinkType x)))
(define-public UnionLinkType (cog-type->int 'UnionLink))
(define-public (UnionLink . x)
	(apply cog-new-link (cons UnionLinkType x)))
(define-public (Union . x)
	(apply cog-new-link (cons UnionLinkType x)))
(define-public IntersectionLinkType (cog-type->int 'IntersectionLink))
(define-public (IntersectionLink . x)
	(apply cog-new-link (cons IntersectionLinkType x)))
(define-public (Intersection . x)
	(apply cog-new-link (cons IntersectionLinkType x)))
(define-public ComplementLinkType (cog-type->int 'ComplementLink))
(define-public (ComplementLink . x)
	(apply cog-new-link (cons ComplementLinkType x)))
(define-public (Complement . x)
	(apply cog-new-link (cons ComplementLinkType x)))
(define-public SetDifferenceLinkType (cog-type->int 'SetDifferenceLink))
(define-public (SetDifferenceLink . x)
	(apply cog-new-link (cons SetDifferenceLinkType x)))
(define-public (SetDifference . x)
	(apply cog-new-link (cons SetDifferenceLinkType x)))
(define-public MemberLinkType (cog-type->int 'MemberLink))
(define-public (MemberLink . x)
	(apply cog-new-link (cons MemberLinkType x)))
(define-public (Member . x)
	(apply cog-new-link (cons MemberLinkType x)))
(define-public SubsetLinkType (cog-type->int 'SubsetLink))
(define-public (SubsetLink . x)
	(apply cog-new-link (cons SubsetLinkType x)))
(define-public (Subset . x)
	(apply cog-new-link (cons SubsetLinkType x)))
(define-public ContextLinkType (cog-type->int 'ContextLink))
(define-public (ContextLink . x)
	(apply cog-new-link (cons ContextLinkType x)))
(define-public (Context . x)
	(apply cog-new-link (cons ContextLinkType x)))
(define-public TrueLinkType (cog-type->int 'TrueLink))
(define-public (TrueLink . x)
	(apply cog-new-link (cons TrueLinkType x)))
(define-public (True . x)
	(apply cog-new-link (cons TrueLinkType x)))
(define-public FalseLinkType (cog-type->int 'FalseLink))
(define-public (FalseLink . x)
	(apply cog-new-link (cons FalseLinkType x)))
(define-public (False . x)
	(apply cog-new-link (cons FalseLinkType x)))
(define-public AndLinkType (cog-type->int 'AndLink))
(define-public (AndLink . x)
	(apply cog-new-link (cons AndLinkType x)))
(define-public (And . x)
	(apply cog-new-link (cons AndLinkType x)))
(define-public OrLinkType (cog-type->int 'OrLink))
(define-public (OrLink . x)
	(apply cog-new-link (cons OrLinkType x)))
(define-public (Or . x)
	(apply cog-new-link (cons OrLinkType x)))
(define-public NotLinkType (cog-type->int 'NotLink))
(define-public (NotLink . x)
	(apply cog-new-link (cons NotLinkType x)))
(define-public (Not . x)
	(apply cog-new-link (cons NotLinkType x)))
(define-public SequentialAndLinkType (cog-type->int 'SequentialAndLink))
(define-public (SequentialAndLink . x)
	(apply cog-new-link (cons SequentialAndLinkType x)))
(define-public (SequentialAnd . x)
	(apply cog-new-link (cons SequentialAndLinkType x)))
(define-public SequentialOrLinkType (cog-type->int 'SequentialOrLink))
(define-public (SequentialOrLink . x)
	(apply cog-new-link (cons SequentialOrLinkType x)))
(define-public (SequentialOr . x)
	(apply cog-new-link (cons SequentialOrLinkType x)))
(define-public ChoiceLinkType (cog-type->int 'ChoiceLink))
(define-public (ChoiceLink . x)
	(apply cog-new-link (cons ChoiceLinkType x)))
(define-public (Choice . x)
	(apply cog-new-link (cons ChoiceLinkType x)))
(define-public PresentLinkType (cog-type->int 'PresentLink))
(define-public (PresentLink . x)
	(apply cog-new-link (cons PresentLinkType x)))
(define-public (Present . x)
	(apply cog-new-link (cons PresentLinkType x)))
(define-public AbsentLinkType (cog-type->int 'AbsentLink))
(define-public (AbsentLink . x)
	(apply cog-new-link (cons AbsentLinkType x)))
(define-public (Absent . x)
	(apply cog-new-link (cons AbsentLinkType x)))
(define-public AlwaysLinkType (cog-type->int 'AlwaysLink))
(define-public (AlwaysLink . x)
	(apply cog-new-link (cons AlwaysLinkType x)))
(define-public (Always . x)
	(apply cog-new-link (cons AlwaysLinkType x)))
(define-public ContinuationLinkType (cog-type->int 'ContinuationLink))
(define-public (ContinuationLink . x)
	(apply cog-new-link (cons ContinuationLinkType x)))
(define-public (Continuation . x)
	(apply cog-new-link (cons ContinuationLinkType x)))
(define-public ParallelLinkType (cog-type->int 'ParallelLink))
(define-public (ParallelLink . x)
	(apply cog-new-link (cons ParallelLinkType x)))
(define-public (Parallel . x)
	(apply cog-new-link (cons ParallelLinkType x)))
(define-public ThreadJoinLinkType (cog-type->int 'ThreadJoinLink))
(define-public (ThreadJoinLink . x)
	(apply cog-new-link (cons ThreadJoinLinkType x)))
(define-public (ThreadJoin . x)
	(apply cog-new-link (cons ThreadJoinLinkType x)))
(define-public ExecuteThreadedLinkType (cog-type->int 'ExecuteThreadedLink))
(define-public (ExecuteThreadedLink . x)
	(apply cog-new-link (cons ExecuteThreadedLinkType x)))
(define-public (ExecuteThreaded . x)
	(apply cog-new-link (cons ExecuteThreadedLinkType x)))
(define-public LexicalNodeType (cog-type->int 'LexicalNode))
(define-public (LexicalNode . x)
	(apply cog-new-node (cons LexicalNodeType x)))
(define-public (Lexical . x)
	(apply cog-new-node (cons LexicalNodeType x)))
(define-public AnyNodeType (cog-type->int 'AnyNode))
(define-public (AnyNode . x)
	(apply cog-new-node (cons AnyNodeType x)))
(define-public (Any . x)
	(apply cog-new-node (cons AnyNodeType x)))
(define-public ConnectorType (cog-type->int 'Connector))
(define-public (Connector . x)
	(apply cog-new-link (cons ConnectorType x)))
(define-public (Connector . x)
	(apply cog-new-link (cons ConnectorType x)))
(define-public DirectionType (cog-type->int 'Direction))
(define-public (Direction . x)
	(apply cog-new-node (cons DirectionType x)))
(define-public (Direction . x)
	(apply cog-new-node (cons DirectionType x)))
(define-public ConnectorDirType (cog-type->int 'ConnectorDir))
(define-public (ConnectorDir . x)
	(apply cog-new-node (cons ConnectorDirType x)))
(define-public (ConnectorDir . x)
	(apply cog-new-node (cons ConnectorDirType x)))
(define-public BondType (cog-type->int 'Bond))
(define-public (Bond . x)
	(apply cog-new-node (cons BondType x)))
(define-public (Bond . x)
	(apply cog-new-node (cons BondType x)))
(define-public ConnectorSeqType (cog-type->int 'ConnectorSeq))
(define-public (ConnectorSeq . x)
	(apply cog-new-link (cons ConnectorSeqType x)))
(define-public (ConnectorSeq . x)
	(apply cog-new-link (cons ConnectorSeqType x)))
(define-public ConnectorSetType (cog-type->int 'ConnectorSet))
(define-public (ConnectorSet . x)
	(apply cog-new-link (cons ConnectorSetType x)))
(define-public (ConnectorSet . x)
	(apply cog-new-link (cons ConnectorSetType x)))
(define-public ConnectorChoiceType (cog-type->int 'ConnectorChoice))
(define-public (ConnectorChoice . x)
	(apply cog-new-link (cons ConnectorChoiceType x)))
(define-public (ConnectorChoice . x)
	(apply cog-new-link (cons ConnectorChoiceType x)))
(define-public SectionType (cog-type->int 'Section))
(define-public (Section . x)
	(apply cog-new-link (cons SectionType x)))
(define-public (Section . x)
	(apply cog-new-link (cons SectionType x)))
(define-public ShapeLinkType (cog-type->int 'ShapeLink))
(define-public (ShapeLink . x)
	(apply cog-new-link (cons ShapeLinkType x)))
(define-public (Shape . x)
	(apply cog-new-link (cons ShapeLinkType x)))
(define-public CrossSectionType (cog-type->int 'CrossSection))
(define-public (CrossSection . x)
	(apply cog-new-link (cons CrossSectionType x)))
(define-public (CrossSection . x)
	(apply cog-new-link (cons CrossSectionType x)))
(define-public ItemNodeType (cog-type->int 'ItemNode))
(define-public (ItemNode . x)
	(apply cog-new-node (cons ItemNodeType x)))
(define-public (Item . x)
	(apply cog-new-node (cons ItemNodeType x)))
(define-public ItemClassNodeType (cog-type->int 'ItemClassNode))
(define-public (ItemClassNode . x)
	(apply cog-new-node (cons ItemClassNodeType x)))
(define-public (ItemClass . x)
	(apply cog-new-node (cons ItemClassNodeType x)))
(define-public TagNodeType (cog-type->int 'TagNode))
(define-public (TagNode . x)
	(apply cog-new-node (cons TagNodeType x)))
(define-public (Tag . x)
	(apply cog-new-node (cons TagNodeType x)))
(define-public TagLinkType (cog-type->int 'TagLink))
(define-public (TagLink . x)
	(apply cog-new-link (cons TagLinkType x)))
(define-public (Tag . x)
	(apply cog-new-link (cons TagLinkType x)))
(define-public VariableNodeType (cog-type->int 'VariableNode))
(define-public (VariableNode . x)
	(apply cog-new-node (cons VariableNodeType x)))
(define-public (Variable . x)
	(apply cog-new-node (cons VariableNodeType x)))
(define-public VariableListType (cog-type->int 'VariableList))
(define-public (VariableList . x)
	(apply cog-new-link (cons VariableListType x)))
(define-public (VariableList . x)
	(apply cog-new-link (cons VariableListType x)))
(define-public VariableSetType (cog-type->int 'VariableSet))
(define-public (VariableSet . x)
	(apply cog-new-link (cons VariableSetType x)))
(define-public (VariableSet . x)
	(apply cog-new-link (cons VariableSetType x)))
(define-public GlobNodeType (cog-type->int 'GlobNode))
(define-public (GlobNode . x)
	(apply cog-new-node (cons GlobNodeType x)))
(define-public (Glob . x)
	(apply cog-new-node (cons GlobNodeType x)))
(define-public QuoteLinkType (cog-type->int 'QuoteLink))
(define-public (QuoteLink . x)
	(apply cog-new-link (cons QuoteLinkType x)))
(define-public (Quote . x)
	(apply cog-new-link (cons QuoteLinkType x)))
(define-public UnquoteLinkType (cog-type->int 'UnquoteLink))
(define-public (UnquoteLink . x)
	(apply cog-new-link (cons UnquoteLinkType x)))
(define-public (Unquote . x)
	(apply cog-new-link (cons UnquoteLinkType x)))
(define-public LocalQuoteLinkType (cog-type->int 'LocalQuoteLink))
(define-public (LocalQuoteLink . x)
	(apply cog-new-link (cons LocalQuoteLinkType x)))
(define-public (LocalQuote . x)
	(apply cog-new-link (cons LocalQuoteLinkType x)))
(define-public DontExecLinkType (cog-type->int 'DontExecLink))
(define-public (DontExecLink . x)
	(apply cog-new-link (cons DontExecLinkType x)))
(define-public (DontExec . x)
	(apply cog-new-link (cons DontExecLinkType x)))
(define-public ReplacementLinkType (cog-type->int 'ReplacementLink))
(define-public (ReplacementLink . x)
	(apply cog-new-link (cons ReplacementLinkType x)))
(define-public (Replacement . x)
	(apply cog-new-link (cons ReplacementLinkType x)))
(define-public FreeLinkType (cog-type->int 'FreeLink))
(define-public (FreeLink . x)
	(apply cog-new-link (cons FreeLinkType x)))
(define-public (Free . x)
	(apply cog-new-link (cons FreeLinkType x)))
(define-public DeleteLinkType (cog-type->int 'DeleteLink))
(define-public (DeleteLink . x)
	(apply cog-new-link (cons DeleteLinkType x)))
(define-public (Delete . x)
	(apply cog-new-link (cons DeleteLinkType x)))
(define-public UniqueLinkType (cog-type->int 'UniqueLink))
(define-public (UniqueLink . x)
	(apply cog-new-link (cons UniqueLinkType x)))
(define-public (Unique . x)
	(apply cog-new-link (cons UniqueLinkType x)))
(define-public StateLinkType (cog-type->int 'StateLink))
(define-public (StateLink . x)
	(apply cog-new-link (cons StateLinkType x)))
(define-public (State . x)
	(apply cog-new-link (cons StateLinkType x)))
(define-public DefineLinkType (cog-type->int 'DefineLink))
(define-public (DefineLink . x)
	(apply cog-new-link (cons DefineLinkType x)))
(define-public (Define . x)
	(apply cog-new-link (cons DefineLinkType x)))
(define-public ScopeLinkType (cog-type->int 'ScopeLink))
(define-public (ScopeLink . x)
	(apply cog-new-link (cons ScopeLinkType x)))
(define-public (Scope . x)
	(apply cog-new-link (cons ScopeLinkType x)))
(define-public RewriteLinkType (cog-type->int 'RewriteLink))
(define-public (RewriteLink . x)
	(apply cog-new-link (cons RewriteLinkType x)))
(define-public (Rewrite . x)
	(apply cog-new-link (cons RewriteLinkType x)))
(define-public PrenexLinkType (cog-type->int 'PrenexLink))
(define-public (PrenexLink . x)
	(apply cog-new-link (cons PrenexLinkType x)))
(define-public (Prenex . x)
	(apply cog-new-link (cons PrenexLinkType x)))
(define-public LambdaLinkType (cog-type->int 'LambdaLink))
(define-public (LambdaLink . x)
	(apply cog-new-link (cons LambdaLinkType x)))
(define-public (Lambda . x)
	(apply cog-new-link (cons LambdaLinkType x)))
(define-public PutLinkType (cog-type->int 'PutLink))
(define-public (PutLink . x)
	(apply cog-new-link (cons PutLinkType x)))
(define-public (Put . x)
	(apply cog-new-link (cons PutLinkType x)))
(define-public JoinLinkType (cog-type->int 'JoinLink))
(define-public (JoinLink . x)
	(apply cog-new-link (cons JoinLinkType x)))
(define-public (Join . x)
	(apply cog-new-link (cons JoinLinkType x)))
(define-public MinimalJoinLinkType (cog-type->int 'MinimalJoinLink))
(define-public (MinimalJoinLink . x)
	(apply cog-new-link (cons MinimalJoinLinkType x)))
(define-public (MinimalJoin . x)
	(apply cog-new-link (cons MinimalJoinLinkType x)))
(define-public UpperSetLinkType (cog-type->int 'UpperSetLink))
(define-public (UpperSetLink . x)
	(apply cog-new-link (cons UpperSetLinkType x)))
(define-public (UpperSet . x)
	(apply cog-new-link (cons UpperSetLinkType x)))
(define-public MaximalJoinLinkType (cog-type->int 'MaximalJoinLink))
(define-public (MaximalJoinLink . x)
	(apply cog-new-link (cons MaximalJoinLinkType x)))
(define-public (MaximalJoin . x)
	(apply cog-new-link (cons MaximalJoinLinkType x)))
(define-public PatternLinkType (cog-type->int 'PatternLink))
(define-public (PatternLink . x)
	(apply cog-new-link (cons PatternLinkType x)))
(define-public (Pattern . x)
	(apply cog-new-link (cons PatternLinkType x)))
(define-public SatisfyingLinkType (cog-type->int 'SatisfyingLink))
(define-public (SatisfyingLink . x)
	(apply cog-new-link (cons SatisfyingLinkType x)))
(define-public (Satisfying . x)
	(apply cog-new-link (cons SatisfyingLinkType x)))
(define-public MeetLinkType (cog-type->int 'MeetLink))
(define-public (MeetLink . x)
	(apply cog-new-link (cons MeetLinkType x)))
(define-public (Meet . x)
	(apply cog-new-link (cons MeetLinkType x)))
(define-public GetLinkType (cog-type->int 'GetLink))
(define-public (GetLink . x)
	(apply cog-new-link (cons GetLinkType x)))
(define-public (Get . x)
	(apply cog-new-link (cons GetLinkType x)))
(define-public QueryLinkType (cog-type->int 'QueryLink))
(define-public (QueryLink . x)
	(apply cog-new-link (cons QueryLinkType x)))
(define-public (Query . x)
	(apply cog-new-link (cons QueryLinkType x)))
(define-public BindLinkType (cog-type->int 'BindLink))
(define-public (BindLink . x)
	(apply cog-new-link (cons BindLinkType x)))
(define-public (Bind . x)
	(apply cog-new-link (cons BindLinkType x)))
(define-public DualLinkType (cog-type->int 'DualLink))
(define-public (DualLink . x)
	(apply cog-new-link (cons DualLinkType x)))
(define-public (Dual . x)
	(apply cog-new-link (cons DualLinkType x)))
(define-public EvaluationLinkType (cog-type->int 'EvaluationLink))
(define-public (EvaluationLink . x)
	(apply cog-new-link (cons EvaluationLinkType x)))
(define-public (Evaluation . x)
	(apply cog-new-link (cons EvaluationLinkType x)))
(define-public TypeNodeType (cog-type->int 'TypeNode))
(define-public (TypeNode . x)
	(apply cog-new-node (cons TypeNodeType x)))
(define-public (Type . x)
	(apply cog-new-node (cons TypeNodeType x)))
(define-public TypeInhNodeType (cog-type->int 'TypeInhNode))
(define-public (TypeInhNode . x)
	(apply cog-new-node (cons TypeInhNodeType x)))
(define-public (TypeInh . x)
	(apply cog-new-node (cons TypeInhNodeType x)))
(define-public TypeCoInhNodeType (cog-type->int 'TypeCoInhNode))
(define-public (TypeCoInhNode . x)
	(apply cog-new-node (cons TypeCoInhNodeType x)))
(define-public (TypeCoInh . x)
	(apply cog-new-node (cons TypeCoInhNodeType x)))
(define-public DefinedTypeNodeType (cog-type->int 'DefinedTypeNode))
(define-public (DefinedTypeNode . x)
	(apply cog-new-node (cons DefinedTypeNodeType x)))
(define-public (DefinedType . x)
	(apply cog-new-node (cons DefinedTypeNodeType x)))
(define-public TypeChoiceType (cog-type->int 'TypeChoice))
(define-public (TypeChoice . x)
	(apply cog-new-link (cons TypeChoiceType x)))
(define-public (TypeChoice . x)
	(apply cog-new-link (cons TypeChoiceType x)))
(define-public TypeIntersectionLinkType (cog-type->int 'TypeIntersectionLink))
(define-public (TypeIntersectionLink . x)
	(apply cog-new-link (cons TypeIntersectionLinkType x)))
(define-public (TypeIntersection . x)
	(apply cog-new-link (cons TypeIntersectionLinkType x)))
(define-public ArrowLinkType (cog-type->int 'ArrowLink))
(define-public (ArrowLink . x)
	(apply cog-new-link (cons ArrowLinkType x)))
(define-public (Arrow . x)
	(apply cog-new-link (cons ArrowLinkType x)))
(define-public SignatureLinkType (cog-type->int 'SignatureLink))
(define-public (SignatureLink . x)
	(apply cog-new-link (cons SignatureLinkType x)))
(define-public (Signature . x)
	(apply cog-new-link (cons SignatureLinkType x)))
(define-public TypedVariableLinkType (cog-type->int 'TypedVariableLink))
(define-public (TypedVariableLink . x)
	(apply cog-new-link (cons TypedVariableLinkType x)))
(define-public (TypedVariable . x)
	(apply cog-new-link (cons TypedVariableLinkType x)))
(define-public TypedAtomLinkType (cog-type->int 'TypedAtomLink))
(define-public (TypedAtomLink . x)
	(apply cog-new-link (cons TypedAtomLinkType x)))
(define-public (TypedAtom . x)
	(apply cog-new-link (cons TypedAtomLinkType x)))
(define-public IntervalLinkType (cog-type->int 'IntervalLink))
(define-public (IntervalLink . x)
	(apply cog-new-link (cons IntervalLinkType x)))
(define-public (Interval . x)
	(apply cog-new-link (cons IntervalLinkType x)))
(define-public AnchorNodeType (cog-type->int 'AnchorNode))
(define-public (AnchorNode . x)
	(apply cog-new-node (cons AnchorNodeType x)))
(define-public (Anchor . x)
	(apply cog-new-node (cons AnchorNodeType x)))
(define-public SimilarityLinkType (cog-type->int 'SimilarityLink))
(define-public (SimilarityLink . x)
	(apply cog-new-link (cons SimilarityLinkType x)))
(define-public (Similarity . x)
	(apply cog-new-link (cons SimilarityLinkType x)))
(define-public VirtualLinkType (cog-type->int 'VirtualLink))
(define-public (VirtualLink . x)
	(apply cog-new-link (cons VirtualLinkType x)))
(define-public (Virtual . x)
	(apply cog-new-link (cons VirtualLinkType x)))
(define-public GreaterThanLinkType (cog-type->int 'GreaterThanLink))
(define-public (GreaterThanLink . x)
	(apply cog-new-link (cons GreaterThanLinkType x)))
(define-public (GreaterThan . x)
	(apply cog-new-link (cons GreaterThanLinkType x)))
(define-public IsClosedLinkType (cog-type->int 'IsClosedLink))
(define-public (IsClosedLink . x)
	(apply cog-new-link (cons IsClosedLinkType x)))
(define-public (IsClosed . x)
	(apply cog-new-link (cons IsClosedLinkType x)))
(define-public IsTrueLinkType (cog-type->int 'IsTrueLink))
(define-public (IsTrueLink . x)
	(apply cog-new-link (cons IsTrueLinkType x)))
(define-public (IsTrue . x)
	(apply cog-new-link (cons IsTrueLinkType x)))
(define-public IsFalseLinkType (cog-type->int 'IsFalseLink))
(define-public (IsFalseLink . x)
	(apply cog-new-link (cons IsFalseLinkType x)))
(define-public (IsFalse . x)
	(apply cog-new-link (cons IsFalseLinkType x)))
(define-public IdenticalLinkType (cog-type->int 'IdenticalLink))
(define-public (IdenticalLink . x)
	(apply cog-new-link (cons IdenticalLinkType x)))
(define-public (Identical . x)
	(apply cog-new-link (cons IdenticalLinkType x)))
(define-public EqualLinkType (cog-type->int 'EqualLink))
(define-public (EqualLink . x)
	(apply cog-new-link (cons EqualLinkType x)))
(define-public (Equal . x)
	(apply cog-new-link (cons EqualLinkType x)))
(define-public AlphaEqualLinkType (cog-type->int 'AlphaEqualLink))
(define-public (AlphaEqualLink . x)
	(apply cog-new-link (cons AlphaEqualLinkType x)))
(define-public (AlphaEqual . x)
	(apply cog-new-link (cons AlphaEqualLinkType x)))
(define-public ExclusiveLinkType (cog-type->int 'ExclusiveLink))
(define-public (ExclusiveLink . x)
	(apply cog-new-link (cons ExclusiveLinkType x)))
(define-public (Exclusive . x)
	(apply cog-new-link (cons ExclusiveLinkType x)))
(define-public SatisfactionLinkType (cog-type->int 'SatisfactionLink))
(define-public (SatisfactionLink . x)
	(apply cog-new-link (cons SatisfactionLinkType x)))
(define-public (Satisfaction . x)
	(apply cog-new-link (cons SatisfactionLinkType x)))
(define-public FunctionLinkType (cog-type->int 'FunctionLink))
(define-public (FunctionLink . x)
	(apply cog-new-link (cons FunctionLinkType x)))
(define-public (Function . x)
	(apply cog-new-link (cons FunctionLinkType x)))
(define-public NumericFunctionLinkType (cog-type->int 'NumericFunctionLink))
(define-public (NumericFunctionLink . x)
	(apply cog-new-link (cons NumericFunctionLinkType x)))
(define-public (NumericFunction . x)
	(apply cog-new-link (cons NumericFunctionLinkType x)))
(define-public FoldLinkType (cog-type->int 'FoldLink))
(define-public (FoldLink . x)
	(apply cog-new-link (cons FoldLinkType x)))
(define-public (Fold . x)
	(apply cog-new-link (cons FoldLinkType x)))
(define-public ArithmeticLinkType (cog-type->int 'ArithmeticLink))
(define-public (ArithmeticLink . x)
	(apply cog-new-link (cons ArithmeticLinkType x)))
(define-public (Arithmetic . x)
	(apply cog-new-link (cons ArithmeticLinkType x)))
(define-public PlusLinkType (cog-type->int 'PlusLink))
(define-public (PlusLink . x)
	(apply cog-new-link (cons PlusLinkType x)))
(define-public (Plus . x)
	(apply cog-new-link (cons PlusLinkType x)))
(define-public MinusLinkType (cog-type->int 'MinusLink))
(define-public (MinusLink . x)
	(apply cog-new-link (cons MinusLinkType x)))
(define-public (Minus . x)
	(apply cog-new-link (cons MinusLinkType x)))
(define-public TimesLinkType (cog-type->int 'TimesLink))
(define-public (TimesLink . x)
	(apply cog-new-link (cons TimesLinkType x)))
(define-public (Times . x)
	(apply cog-new-link (cons TimesLinkType x)))
(define-public DivideLinkType (cog-type->int 'DivideLink))
(define-public (DivideLink . x)
	(apply cog-new-link (cons DivideLinkType x)))
(define-public (Divide . x)
	(apply cog-new-link (cons DivideLinkType x)))
(define-public MinLinkType (cog-type->int 'MinLink))
(define-public (MinLink . x)
	(apply cog-new-link (cons MinLinkType x)))
(define-public (Min . x)
	(apply cog-new-link (cons MinLinkType x)))
(define-public MaxLinkType (cog-type->int 'MaxLink))
(define-public (MaxLink . x)
	(apply cog-new-link (cons MaxLinkType x)))
(define-public (Max . x)
	(apply cog-new-link (cons MaxLinkType x)))
(define-public HeavisideLinkType (cog-type->int 'HeavisideLink))
(define-public (HeavisideLink . x)
	(apply cog-new-link (cons HeavisideLinkType x)))
(define-public (Heaviside . x)
	(apply cog-new-link (cons HeavisideLinkType x)))
(define-public Log2LinkType (cog-type->int 'Log2Link))
(define-public (Log2Link . x)
	(apply cog-new-link (cons Log2LinkType x)))
(define-public (Log2 . x)
	(apply cog-new-link (cons Log2LinkType x)))
(define-public PowLinkType (cog-type->int 'PowLink))
(define-public (PowLink . x)
	(apply cog-new-link (cons PowLinkType x)))
(define-public (Pow . x)
	(apply cog-new-link (cons PowLinkType x)))
(define-public RandomNumberLinkType (cog-type->int 'RandomNumberLink))
(define-public (RandomNumberLink . x)
	(apply cog-new-link (cons RandomNumberLinkType x)))
(define-public (RandomNumber . x)
	(apply cog-new-link (cons RandomNumberLinkType x)))
(define-public AccumulateLinkType (cog-type->int 'AccumulateLink))
(define-public (AccumulateLink . x)
	(apply cog-new-link (cons AccumulateLinkType x)))
(define-public (Accumulate . x)
	(apply cog-new-link (cons AccumulateLinkType x)))
(define-public ArityLinkType (cog-type->int 'ArityLink))
(define-public (ArityLink . x)
	(apply cog-new-link (cons ArityLinkType x)))
(define-public (Arity . x)
	(apply cog-new-link (cons ArityLinkType x)))
(define-public TimeLinkType (cog-type->int 'TimeLink))
(define-public (TimeLink . x)
	(apply cog-new-link (cons TimeLinkType x)))
(define-public (Time . x)
	(apply cog-new-link (cons TimeLinkType x)))
(define-public ValueOfLinkType (cog-type->int 'ValueOfLink))
(define-public (ValueOfLink . x)
	(apply cog-new-link (cons ValueOfLinkType x)))
(define-public (ValueOf . x)
	(apply cog-new-link (cons ValueOfLinkType x)))
(define-public StreamValueOfLinkType (cog-type->int 'StreamValueOfLink))
(define-public (StreamValueOfLink . x)
	(apply cog-new-link (cons StreamValueOfLinkType x)))
(define-public (StreamValueOf . x)
	(apply cog-new-link (cons StreamValueOfLinkType x)))
(define-public TruthValueOfLinkType (cog-type->int 'TruthValueOfLink))
(define-public (TruthValueOfLink . x)
	(apply cog-new-link (cons TruthValueOfLinkType x)))
(define-public (TruthValueOf . x)
	(apply cog-new-link (cons TruthValueOfLinkType x)))
(define-public StrengthOfLinkType (cog-type->int 'StrengthOfLink))
(define-public (StrengthOfLink . x)
	(apply cog-new-link (cons StrengthOfLinkType x)))
(define-public (StrengthOf . x)
	(apply cog-new-link (cons StrengthOfLinkType x)))
(define-public ConfidenceOfLinkType (cog-type->int 'ConfidenceOfLink))
(define-public (ConfidenceOfLink . x)
	(apply cog-new-link (cons ConfidenceOfLinkType x)))
(define-public (ConfidenceOf . x)
	(apply cog-new-link (cons ConfidenceOfLinkType x)))
(define-public CountOfLinkType (cog-type->int 'CountOfLink))
(define-public (CountOfLink . x)
	(apply cog-new-link (cons CountOfLinkType x)))
(define-public (CountOf . x)
	(apply cog-new-link (cons CountOfLinkType x)))
(define-public SetValueLinkType (cog-type->int 'SetValueLink))
(define-public (SetValueLink . x)
	(apply cog-new-link (cons SetValueLinkType x)))
(define-public (SetValue . x)
	(apply cog-new-link (cons SetValueLinkType x)))
(define-public SetTVLinkType (cog-type->int 'SetTVLink))
(define-public (SetTVLink . x)
	(apply cog-new-link (cons SetTVLinkType x)))
(define-public (SetTV . x)
	(apply cog-new-link (cons SetTVLinkType x)))
(define-public PredicateFormulaLinkType (cog-type->int 'PredicateFormulaLink))
(define-public (PredicateFormulaLink . x)
	(apply cog-new-link (cons PredicateFormulaLinkType x)))
(define-public (PredicateFormula . x)
	(apply cog-new-link (cons PredicateFormulaLinkType x)))
(define-public DynamicFormulaLinkType (cog-type->int 'DynamicFormulaLink))
(define-public (DynamicFormulaLink . x)
	(apply cog-new-link (cons DynamicFormulaLinkType x)))
(define-public (DynamicFormula . x)
	(apply cog-new-link (cons DynamicFormulaLinkType x)))
(define-public ExecutionOutputLinkType (cog-type->int 'ExecutionOutputLink))
(define-public (ExecutionOutputLink . x)
	(apply cog-new-link (cons ExecutionOutputLinkType x)))
(define-public (ExecutionOutput . x)
	(apply cog-new-link (cons ExecutionOutputLinkType x)))
(define-public RandomChoiceLinkType (cog-type->int 'RandomChoiceLink))
(define-public (RandomChoiceLink . x)
	(apply cog-new-link (cons RandomChoiceLinkType x)))
(define-public (RandomChoice . x)
	(apply cog-new-link (cons RandomChoiceLinkType x)))
(define-public CondLinkType (cog-type->int 'CondLink))
(define-public (CondLink . x)
	(apply cog-new-link (cons CondLinkType x)))
(define-public (Cond . x)
	(apply cog-new-link (cons CondLinkType x)))
(define-public SleepLinkType (cog-type->int 'SleepLink))
(define-public (SleepLink . x)
	(apply cog-new-link (cons SleepLinkType x)))
(define-public (Sleep . x)
	(apply cog-new-link (cons SleepLinkType x)))
(define-public MapLinkType (cog-type->int 'MapLink))
(define-public (MapLink . x)
	(apply cog-new-link (cons MapLinkType x)))
(define-public (Map . x)
	(apply cog-new-link (cons MapLinkType x)))
(define-public ProcedureNodeType (cog-type->int 'ProcedureNode))
(define-public (ProcedureNode . x)
	(apply cog-new-node (cons ProcedureNodeType x)))
(define-public (Procedure . x)
	(apply cog-new-node (cons ProcedureNodeType x)))
(define-public GroundedProcedureNodeType (cog-type->int 'GroundedProcedureNode))
(define-public (GroundedProcedureNode . x)
	(apply cog-new-node (cons GroundedProcedureNodeType x)))
(define-public (GroundedProcedure . x)
	(apply cog-new-node (cons GroundedProcedureNodeType x)))
(define-public SchemaNodeType (cog-type->int 'SchemaNode))
(define-public (SchemaNode . x)
	(apply cog-new-node (cons SchemaNodeType x)))
(define-public (Schema . x)
	(apply cog-new-node (cons SchemaNodeType x)))
(define-public DefinedSchemaNodeType (cog-type->int 'DefinedSchemaNode))
(define-public (DefinedSchemaNode . x)
	(apply cog-new-node (cons DefinedSchemaNodeType x)))
(define-public (DefinedSchema . x)
	(apply cog-new-node (cons DefinedSchemaNodeType x)))
(define-public GroundedSchemaNodeType (cog-type->int 'GroundedSchemaNode))
(define-public (GroundedSchemaNode . x)
	(apply cog-new-node (cons GroundedSchemaNodeType x)))
(define-public (GroundedSchema . x)
	(apply cog-new-node (cons GroundedSchemaNodeType x)))
(define-public DefinedPredicateNodeType (cog-type->int 'DefinedPredicateNode))
(define-public (DefinedPredicateNode . x)
	(apply cog-new-node (cons DefinedPredicateNodeType x)))
(define-public (DefinedPredicate . x)
	(apply cog-new-node (cons DefinedPredicateNodeType x)))
(define-public GroundedPredicateNodeType (cog-type->int 'GroundedPredicateNode))
(define-public (GroundedPredicateNode . x)
	(apply cog-new-node (cons GroundedPredicateNodeType x)))
(define-public (GroundedPredicate . x)
	(apply cog-new-node (cons GroundedPredicateNodeType x)))
(define-public ForeignAstType (cog-type->int 'ForeignAst))
(define-public (ForeignAst . x)
	(apply cog-new-ast (cons ForeignAstType x)))
(define-public SexprAstType (cog-type->int 'SexprAst))
(define-public (SexprAst . x)
	(apply cog-new-ast (cons SexprAstType x)))
(define-public GuileAstType (cog-type->int 'GuileAst))
(define-public (GuileAst . x)
	(apply cog-new-ast (cons GuileAstType x)))
(define-public JsonAstType (cog-type->int 'JsonAst))
(define-public (JsonAst . x)
	(apply cog-new-ast (cons JsonAstType x)))
(define-public PythonAstType (cog-type->int 'PythonAst))
(define-public (PythonAst . x)
	(apply cog-new-ast (cons PythonAstType x)))
(define-public DirectlyEvaluatableLinkType (cog-type->int 'DirectlyEvaluatableLink))
(define-public (DirectlyEvaluatableLink . x)
	(apply cog-new-link (cons DirectlyEvaluatableLinkType x)))
(define-public (DirectlyEvaluatable . x)
	(apply cog-new-link (cons DirectlyEvaluatableLinkType x)))
(define-public ImplicationLinkType (cog-type->int 'ImplicationLink))
(define-public (ImplicationLink . x)
	(apply cog-new-link (cons ImplicationLinkType x)))
(define-public (Implication . x)
	(apply cog-new-link (cons ImplicationLinkType x)))
(define-public ImplicationScopeLinkType (cog-type->int 'ImplicationScopeLink))
(define-public (ImplicationScopeLink . x)
	(apply cog-new-link (cons ImplicationScopeLinkType x)))
(define-public (ImplicationScope . x)
	(apply cog-new-link (cons ImplicationScopeLinkType x)))
(define-public InheritanceLinkType (cog-type->int 'InheritanceLink))
(define-public (InheritanceLink . x)
	(apply cog-new-link (cons InheritanceLinkType x)))
(define-public (Inheritance . x)
	(apply cog-new-link (cons InheritanceLinkType x)))
(define-public ForAllLinkType (cog-type->int 'ForAllLink))
(define-public (ForAllLink . x)
	(apply cog-new-link (cons ForAllLinkType x)))
(define-public (ForAll . x)
	(apply cog-new-link (cons ForAllLinkType x)))
(define-public ExistsLinkType (cog-type->int 'ExistsLink))
(define-public (ExistsLink . x)
	(apply cog-new-link (cons ExistsLinkType x)))
(define-public (Exists . x)
	(apply cog-new-link (cons ExistsLinkType x)))
(define-public AssociativeLinkType (cog-type->int 'AssociativeLink))
(define-public (AssociativeLink . x)
	(apply cog-new-link (cons AssociativeLinkType x)))
(define-public (Associative . x)
	(apply cog-new-link (cons AssociativeLinkType x)))
(define-public EquivalenceLinkType (cog-type->int 'EquivalenceLink))
(define-public (EquivalenceLink . x)
	(apply cog-new-link (cons EquivalenceLinkType x)))
(define-public (Equivalence . x)
	(apply cog-new-link (cons EquivalenceLinkType x)))
(define-public ExecutionLinkType (cog-type->int 'ExecutionLink))
(define-public (ExecutionLink . x)
	(apply cog-new-link (cons ExecutionLinkType x)))
(define-public (Execution . x)
	(apply cog-new-link (cons ExecutionLinkType x)))
(define-public AttractionLinkType (cog-type->int 'AttractionLink))
(define-public (AttractionLink . x)
	(apply cog-new-link (cons AttractionLinkType x)))
(define-public (Attraction . x)
	(apply cog-new-link (cons AttractionLinkType x)))
(define-public IntensionalInheritanceLinkType (cog-type->int 'IntensionalInheritanceLink))
(define-public (IntensionalInheritanceLink . x)
	(apply cog-new-link (cons IntensionalInheritanceLinkType x)))
(define-public (IntensionalInheritance . x)
	(apply cog-new-link (cons IntensionalInheritanceLinkType x)))
